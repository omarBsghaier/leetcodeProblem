// the same code of exercice  : find pivot index
class Solution {
public:
    int findMiddleIndex(vector<int>& nums) {
        int leftsum =0 ; int j,i = 0 ; 
        int rightsum = 0 ; 
        int n = nums.size() ; 
        int res=-1 ;
        for (int pivot = 0 ; pivot < n ; pivot++){
          
        
            for (i = 0   ; i < pivot ; i++  ){
             leftsum +=nums[i];   
            };
            for ( j = n-1   ; j > pivot ;  j-- ){
              rightsum +=nums[j];   
            } ;
            if ( leftsum ==  rightsum ) {
              return pivot  ;  
            }else {

            leftsum = 0 ;
            rightsum = 0 ; }

        } ; 


        return -1 ; 
        
};
};
// version 2 
// Time Complexity : O(n)
class Solution {
public:
    int findMiddleIndex(vector<int>& nums) {
        int rightSum = accumulate(nums.begin(), nums.end(), 0);
        int leftSum = 0;
        for (int idx = 0; idx < nums.size(); idx++) {
            rightSum -= nums[idx];
            if (leftSum == rightSum)
                return idx;     
            leftSum += nums[idx];
        }
        return -1;      
    }
};
