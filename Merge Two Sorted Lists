/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
      vector<int> v ;
      
      ListNode* cur;
      ListNode* pred;
     if ( list1 == nullptr &&  list2 == nullptr  ) return nullptr ;
     while ( list1 && list2){
        if ( list1->val <= list2->val  ){
            v.push_back(list1->val) ; 
            list1= list1->next ;          
        }
        else { 
            v.push_back(list2->val) ; 
            list2= list2->next ;     }     
        };
     while ( list1){
          v.push_back(list1->val) ; 
          list1= list1->next ; 
     }
    while ( list2){
          v.push_back(list2->val) ; 
          list2= list2->next ; 
     } 
    ListNode* head = new ListNode();
     for ( int i =0 ; i < v.size() ; i++ ){
         cur = new ListNode(v[i]) ; 
        
               if(i==0) {
                head=cur;
                pred=head;
            }
            else {
                pred->next=cur;
                pred=pred->next;
            };
           };
            return head ; 
  
     
};
};
